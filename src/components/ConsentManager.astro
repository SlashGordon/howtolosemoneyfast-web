---
---

<script>
// Cookie consent management
function setCookie(name: string, value: string, days?: number): void {
  let expires = '';
  if (days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    expires = '; expires=' + date.toUTCString();
  }
  document.cookie = name + '=' + (value || '') + expires + '; path=/; SameSite=Lax';
}

function getCookie(name: string): string | null {
  const nameEQ = name + '=';
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
}

// Block all tracking scripts and cookies before consent
function blockTrackingScripts() {
  // Create a MutationObserver to detect and block tracking scripts
  const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === 'childList') {
        for (const node of mutation.addedNodes) {
          if (node.nodeName === 'SCRIPT') {
            const script = node as HTMLScriptElement;
            if (script.src && (
                script.src.includes('google-analytics.com') || 
                script.src.includes('googletagmanager.com') ||
                script.src.includes('analytics') ||
                script.src.includes('tracking')
              )) {
              if (getCookie('analytics-consent') !== 'true') {
                script.type = 'javascript/blocked';
                script.setAttribute('data-blocked', 'true');
                console.log('Blocked tracking script:', script.src);
              }
            }
          }
        }
      }
    }
  });
  
  // Start observing document for script additions
  observer.observe(document.documentElement, {
    childList: true,
    subtree: true
  });
  
  // Return the observer so it can be disconnected if needed
  return observer;
}

interface ConsentEventDetail {
  analytics: boolean;
}

// Add type definition for gtag
interface Window {
  dataLayer: any[];
  gtag: (...args: any[]) => void;
}

function loadGoogleAnalytics(): void {
  const script = document.createElement('script');
  script.async = true;
  script.src = 'https://www.googletagmanager.com/gtag/js?id=G-DJWEGBDXZ4';
  document.head.appendChild(script);
  
  window.dataLayer = window.dataLayer || [];
  function gtag(...args: any[]): void {
    window.dataLayer.push(arguments);
  }
  gtag('js', new Date());
  gtag('config', 'G-DJWEGBDXZ4', {
    'anonymize_ip': true,
    'cookie_flags': 'SameSite=None;Secure'
  });
  
  // Store consent in localStorage for other pages
  localStorage.setItem('analytics_consent', 'true');
  
  // Dispatch event for other scripts
  window.dispatchEvent(new CustomEvent<ConsentEventDetail>('consentUpdated', {
    detail: { analytics: true }
  }));
}

function loadGoogleFonts(): void {
  const link = document.createElement('link');
  link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap';
  link.rel = 'stylesheet';
  document.head.appendChild(link);
}

function initConsent(): void {
  const consentBanner = document.getElementById('consent-banner');
  const acceptAllBtn = document.getElementById('accept-all');
  const acceptNecessaryBtn = document.getElementById('accept-necessary');
  const analyticsConsent = getCookie('analytics-consent');
  const fontsConsent = getCookie('fonts-consent');
  
  if (!consentBanner || !acceptAllBtn || !acceptNecessaryBtn) {
    console.error('Consent elements not found');
    return;
  }
  
  // Start blocking tracking scripts
  const scriptObserver = blockTrackingScripts();
  
  // Show banner if no consent has been given yet
  if (analyticsConsent === null || fontsConsent === null) {
    consentBanner.classList.remove('hidden');
  }
  
  // Load services based on existing consent
  if (analyticsConsent === 'true') {
    loadGoogleAnalytics();
  }
  
  if (fontsConsent === 'true') {
    loadGoogleFonts();
  }
  
  // Event listeners for consent buttons
  acceptAllBtn.addEventListener('click', function() {
    setCookie('analytics-consent', 'true', 365);
    setCookie('fonts-consent', 'true', 365);
    loadGoogleAnalytics();
    loadGoogleFonts();
    consentBanner.classList.add('hidden');
    
    // Reload any blocked scripts
    const blockedScripts = document.querySelectorAll('script[data-blocked="true"]');
    blockedScripts.forEach(script => {
      const newScript = document.createElement('script');
      if (script.src) newScript.src = script.src;
      if (script.textContent) newScript.textContent = script.textContent;
      script.parentNode?.replaceChild(newScript, script);
    });
  });
  
  acceptNecessaryBtn.addEventListener('click', function() {
    setCookie('analytics-consent', 'false', 365);
    setCookie('fonts-consent', 'false', 365);
    consentBanner.classList.add('hidden');
    
    // Remove any tracking cookies that might have been set
    document.cookie = '_ga=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    document.cookie = '_gat=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    document.cookie = '_gid=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  });
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', initConsent);
</script>